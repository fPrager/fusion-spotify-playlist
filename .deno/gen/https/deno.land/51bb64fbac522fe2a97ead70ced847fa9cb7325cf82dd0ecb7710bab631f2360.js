// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
const _ByteLengthQueuingStrategy = ByteLengthQueuingStrategy, _CountQueuingStrategy = CountQueuingStrategy, _ReadableByteStreamController = ReadableByteStreamController, _ReadableStream = ReadableStream, _ReadableStreamDefaultController = ReadableStreamDefaultController, _ReadableStreamDefaultReader = ReadableStreamDefaultReader, _TextDecoderStream = TextDecoderStream, _TextEncoderStream = TextEncoderStream, _TransformStream = TransformStream, _TransformStreamDefaultController = TransformStreamDefaultController, _WritableStream = WritableStream, _WritableStreamDefaultController = WritableStreamDefaultController, _WritableStreamDefaultWriter = WritableStreamDefaultWriter;
export { _ByteLengthQueuingStrategy as ByteLengthQueuingStrategy, _CountQueuingStrategy as CountQueuingStrategy, _ReadableByteStreamController as ReadableByteStreamController, _ReadableStream as ReadableStream, _ReadableStreamDefaultController as ReadableStreamDefaultController, _ReadableStreamDefaultReader as ReadableStreamDefaultReader, _TextDecoderStream as TextDecoderStream, _TextEncoderStream as TextEncoderStream, _TransformStream as TransformStream, _TransformStreamDefaultController as TransformStreamDefaultController, _WritableStream as WritableStream, _WritableStreamDefaultController as WritableStreamDefaultController, _WritableStreamDefaultWriter as WritableStreamDefaultWriter };
export default {
    ReadableStream,
    ReadableStreamDefaultReader,
    ReadableByteStreamController,
    ReadableStreamDefaultController,
    TransformStream,
    TransformStreamDefaultController,
    WritableStream,
    WritableStreamDefaultWriter,
    WritableStreamDefaultController,
    ByteLengthQueuingStrategy,
    CountQueuingStrategy,
    TextEncoderStream,
    TextDecoderStream
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjE2Ny4wL25vZGUvc3RyZWFtL3dlYi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyIHRoZSBEZW5vIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBsaWNlbnNlLlxuY29uc3QgX0J5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3kgPSBCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5LFxuICBfQ291bnRRdWV1aW5nU3RyYXRlZ3kgPSBDb3VudFF1ZXVpbmdTdHJhdGVneSxcbiAgX1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIgPSBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLFxuICBfUmVhZGFibGVTdHJlYW0gPSBSZWFkYWJsZVN0cmVhbSxcbiAgX1JlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIgPSBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLFxuICBfUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyID0gUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLFxuICBfVGV4dERlY29kZXJTdHJlYW0gPSBUZXh0RGVjb2RlclN0cmVhbSxcbiAgX1RleHRFbmNvZGVyU3RyZWFtID0gVGV4dEVuY29kZXJTdHJlYW0sXG4gIF9UcmFuc2Zvcm1TdHJlYW0gPSBUcmFuc2Zvcm1TdHJlYW0sXG4gIF9UcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlciA9IFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyLFxuICBfV3JpdGFibGVTdHJlYW0gPSBXcml0YWJsZVN0cmVhbSxcbiAgX1dyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIgPSBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLFxuICBfV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyID0gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyO1xuXG5leHBvcnQge1xuICBfQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneSBhcyBCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5LFxuICBfQ291bnRRdWV1aW5nU3RyYXRlZ3kgYXMgQ291bnRRdWV1aW5nU3RyYXRlZ3ksXG4gIF9SZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyIGFzIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIsXG4gIF9SZWFkYWJsZVN0cmVhbSBhcyBSZWFkYWJsZVN0cmVhbSxcbiAgX1JlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIgYXMgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcixcbiAgX1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlciBhcyBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIsXG4gIF9UZXh0RGVjb2RlclN0cmVhbSBhcyBUZXh0RGVjb2RlclN0cmVhbSxcbiAgX1RleHRFbmNvZGVyU3RyZWFtIGFzIFRleHRFbmNvZGVyU3RyZWFtLFxuICBfVHJhbnNmb3JtU3RyZWFtIGFzIFRyYW5zZm9ybVN0cmVhbSxcbiAgX1RyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyIGFzIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyLFxuICBfV3JpdGFibGVTdHJlYW0gYXMgV3JpdGFibGVTdHJlYW0sXG4gIF9Xcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyIGFzIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIsXG4gIF9Xcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIgYXMgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBSZWFkYWJsZVN0cmVhbSxcbiAgUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLFxuICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLFxuICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLFxuICBUcmFuc2Zvcm1TdHJlYW0sXG4gIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyLFxuICBXcml0YWJsZVN0cmVhbSxcbiAgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLFxuICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLFxuICBCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5LFxuICBDb3VudFF1ZXVpbmdTdHJhdGVneSxcbiAgVGV4dEVuY29kZXJTdHJlYW0sXG4gIFRleHREZWNvZGVyU3RyZWFtLFxufTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwRUFBMEU7QUFDMUUsTUFBTSw2QkFBNkIsMkJBQ2pDLHdCQUF3QixzQkFDeEIsZ0NBQWdDLDhCQUNoQyxrQkFBa0IsZ0JBQ2xCLG1DQUFtQyxpQ0FDbkMsK0JBQStCLDZCQUMvQixxQkFBcUIsbUJBQ3JCLHFCQUFxQixtQkFDckIsbUJBQW1CLGlCQUNuQixvQ0FBb0Msa0NBQ3BDLGtCQUFrQixnQkFDbEIsbUNBQW1DLGlDQUNuQywrQkFBK0I7QUFFakMsU0FDRSw4QkFBOEIseUJBQXlCLEVBQ3ZELHlCQUF5QixvQkFBb0IsRUFDN0MsaUNBQWlDLDRCQUE0QixFQUM3RCxtQkFBbUIsY0FBYyxFQUNqQyxvQ0FBb0MsK0JBQStCLEVBQ25FLGdDQUFnQywyQkFBMkIsRUFDM0Qsc0JBQXNCLGlCQUFpQixFQUN2QyxzQkFBc0IsaUJBQWlCLEVBQ3ZDLG9CQUFvQixlQUFlLEVBQ25DLHFDQUFxQyxnQ0FBZ0MsRUFDckUsbUJBQW1CLGNBQWMsRUFDakMsb0NBQW9DLCtCQUErQixFQUNuRSxnQ0FBZ0MsMkJBQTJCLEdBQzNEO0FBRUYsZUFBZTtJQUNiO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0FBQ0YsRUFBRSJ9
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
// Copyright Joyent and Node contributors. All rights reserved. MIT license.
import { notImplemented } from "./_utils.ts";
import _tls_common from "./_tls_common.ts";
import _tls_wrap from "./_tls_wrap.ts";
// openssl -> rustls
const cipherMap = {
    "__proto__": null,
    "AES128-GCM-SHA256": "TLS13_AES_128_GCM_SHA256",
    "AES256-GCM-SHA384": "TLS13_AES_256_GCM_SHA384",
    "ECDHE-ECDSA-AES128-GCM-SHA256": "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
    "ECDHE-ECDSA-AES256-GCM-SHA384": "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
    "ECDHE-ECDSA-CHACHA20-POLY1305": "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
    "ECDHE-RSA-AES128-GCM-SHA256": "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
    "ECDHE-RSA-AES256-GCM-SHA384": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
    "ECDHE-RSA-CHACHA20-POLY1305": "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
    "TLS_AES_128_GCM_SHA256": "TLS13_AES_128_GCM_SHA256",
    "TLS_AES_256_GCM_SHA384": "TLS13_AES_256_GCM_SHA384",
    "TLS_CHACHA20_POLY1305_SHA256": "TLS13_CHACHA20_POLY1305_SHA256"
};
export function getCiphers() {
    // TODO(bnoordhuis) Use locale-insensitive toLowerCase()
    return Object.keys(cipherMap).map((name)=>name.toLowerCase());
}
export const rootCertificates = undefined;
export const DEFAULT_ECDH_CURVE = "auto";
export const DEFAULT_MAX_VERSION = "TLSv1.3";
export const DEFAULT_MIN_VERSION = "TLSv1.2";
export class CryptoStream {
}
export class SecurePair {
}
export const Server = _tls_wrap.Server;
export function createSecurePair() {
    notImplemented("tls.createSecurePair");
}
export default {
    CryptoStream,
    SecurePair,
    Server,
    TLSSocket: _tls_wrap.TLSSocket,
    checkServerIdentity: _tls_wrap.checkServerIdentity,
    connect: _tls_wrap.connect,
    createSecureContext: _tls_common.createSecureContext,
    createSecurePair,
    createServer: _tls_wrap.createServer,
    getCiphers,
    rootCertificates,
    DEFAULT_CIPHERS: _tls_wrap.DEFAULT_CIPHERS,
    DEFAULT_ECDH_CURVE,
    DEFAULT_MAX_VERSION,
    DEFAULT_MIN_VERSION
};
export const checkServerIdentity = _tls_wrap.checkServerIdentity;
export const connect = _tls_wrap.connect;
export const createSecureContext = _tls_common.createSecureContext;
export const createServer = _tls_wrap.createServer;
export const DEFAULT_CIPHERS = _tls_wrap.DEFAULT_CIPHERS;
export const TLSSocket = _tls_wrap.TLSSocket;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjE2Ny4wL25vZGUvdGxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG4vLyBDb3B5cmlnaHQgSm95ZW50IGFuZCBOb2RlIGNvbnRyaWJ1dG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5cbmltcG9ydCB7IG5vdEltcGxlbWVudGVkIH0gZnJvbSBcIi4vX3V0aWxzLnRzXCI7XG5pbXBvcnQgX3Rsc19jb21tb24gZnJvbSBcIi4vX3Rsc19jb21tb24udHNcIjtcbmltcG9ydCBfdGxzX3dyYXAgZnJvbSBcIi4vX3Rsc193cmFwLnRzXCI7XG5cbi8vIG9wZW5zc2wgLT4gcnVzdGxzXG5jb25zdCBjaXBoZXJNYXAgPSB7XG4gIFwiX19wcm90b19fXCI6IG51bGwsXG4gIFwiQUVTMTI4LUdDTS1TSEEyNTZcIjogXCJUTFMxM19BRVNfMTI4X0dDTV9TSEEyNTZcIixcbiAgXCJBRVMyNTYtR0NNLVNIQTM4NFwiOiBcIlRMUzEzX0FFU18yNTZfR0NNX1NIQTM4NFwiLFxuICBcIkVDREhFLUVDRFNBLUFFUzEyOC1HQ00tU0hBMjU2XCI6IFwiVExTX0VDREhFX0VDRFNBX1dJVEhfQUVTXzEyOF9HQ01fU0hBMjU2XCIsXG4gIFwiRUNESEUtRUNEU0EtQUVTMjU2LUdDTS1TSEEzODRcIjogXCJUTFNfRUNESEVfRUNEU0FfV0lUSF9BRVNfMjU2X0dDTV9TSEEzODRcIixcbiAgXCJFQ0RIRS1FQ0RTQS1DSEFDSEEyMC1QT0xZMTMwNVwiOlxuICAgIFwiVExTX0VDREhFX0VDRFNBX1dJVEhfQ0hBQ0hBMjBfUE9MWTEzMDVfU0hBMjU2XCIsXG4gIFwiRUNESEUtUlNBLUFFUzEyOC1HQ00tU0hBMjU2XCI6IFwiVExTX0VDREhFX1JTQV9XSVRIX0FFU18xMjhfR0NNX1NIQTI1NlwiLFxuICBcIkVDREhFLVJTQS1BRVMyNTYtR0NNLVNIQTM4NFwiOiBcIlRMU19FQ0RIRV9SU0FfV0lUSF9BRVNfMjU2X0dDTV9TSEEzODRcIixcbiAgXCJFQ0RIRS1SU0EtQ0hBQ0hBMjAtUE9MWTEzMDVcIjogXCJUTFNfRUNESEVfUlNBX1dJVEhfQ0hBQ0hBMjBfUE9MWTEzMDVfU0hBMjU2XCIsXG4gIFwiVExTX0FFU18xMjhfR0NNX1NIQTI1NlwiOiBcIlRMUzEzX0FFU18xMjhfR0NNX1NIQTI1NlwiLFxuICBcIlRMU19BRVNfMjU2X0dDTV9TSEEzODRcIjogXCJUTFMxM19BRVNfMjU2X0dDTV9TSEEzODRcIixcbiAgXCJUTFNfQ0hBQ0hBMjBfUE9MWTEzMDVfU0hBMjU2XCI6IFwiVExTMTNfQ0hBQ0hBMjBfUE9MWTEzMDVfU0hBMjU2XCIsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2lwaGVycygpIHtcbiAgLy8gVE9ETyhibm9vcmRodWlzKSBVc2UgbG9jYWxlLWluc2Vuc2l0aXZlIHRvTG93ZXJDYXNlKClcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGNpcGhlck1hcCkubWFwKChuYW1lKSA9PiBuYW1lLnRvTG93ZXJDYXNlKCkpO1xufVxuXG5leHBvcnQgY29uc3Qgcm9vdENlcnRpZmljYXRlcyA9IHVuZGVmaW5lZDtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0VDREhfQ1VSVkUgPSBcImF1dG9cIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX01BWF9WRVJTSU9OID0gXCJUTFN2MS4zXCI7XG5leHBvcnQgY29uc3QgREVGQVVMVF9NSU5fVkVSU0lPTiA9IFwiVExTdjEuMlwiO1xuXG5leHBvcnQgY2xhc3MgQ3J5cHRvU3RyZWFtIHt9XG5leHBvcnQgY2xhc3MgU2VjdXJlUGFpciB7fVxuZXhwb3J0IGNvbnN0IFNlcnZlciA9IF90bHNfd3JhcC5TZXJ2ZXI7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VjdXJlUGFpcigpIHtcbiAgbm90SW1wbGVtZW50ZWQoXCJ0bHMuY3JlYXRlU2VjdXJlUGFpclwiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBDcnlwdG9TdHJlYW0sXG4gIFNlY3VyZVBhaXIsXG4gIFNlcnZlcixcbiAgVExTU29ja2V0OiBfdGxzX3dyYXAuVExTU29ja2V0LFxuICBjaGVja1NlcnZlcklkZW50aXR5OiBfdGxzX3dyYXAuY2hlY2tTZXJ2ZXJJZGVudGl0eSxcbiAgY29ubmVjdDogX3Rsc193cmFwLmNvbm5lY3QsXG4gIGNyZWF0ZVNlY3VyZUNvbnRleHQ6IF90bHNfY29tbW9uLmNyZWF0ZVNlY3VyZUNvbnRleHQsXG4gIGNyZWF0ZVNlY3VyZVBhaXIsXG4gIGNyZWF0ZVNlcnZlcjogX3Rsc193cmFwLmNyZWF0ZVNlcnZlcixcbiAgZ2V0Q2lwaGVycyxcbiAgcm9vdENlcnRpZmljYXRlcyxcbiAgREVGQVVMVF9DSVBIRVJTOiBfdGxzX3dyYXAuREVGQVVMVF9DSVBIRVJTLFxuICBERUZBVUxUX0VDREhfQ1VSVkUsXG4gIERFRkFVTFRfTUFYX1ZFUlNJT04sXG4gIERFRkFVTFRfTUlOX1ZFUlNJT04sXG59O1xuXG5leHBvcnQgY29uc3QgY2hlY2tTZXJ2ZXJJZGVudGl0eSA9IF90bHNfd3JhcC5jaGVja1NlcnZlcklkZW50aXR5O1xuZXhwb3J0IGNvbnN0IGNvbm5lY3QgPSBfdGxzX3dyYXAuY29ubmVjdDtcbmV4cG9ydCBjb25zdCBjcmVhdGVTZWN1cmVDb250ZXh0ID0gX3Rsc19jb21tb24uY3JlYXRlU2VjdXJlQ29udGV4dDtcbmV4cG9ydCBjb25zdCBjcmVhdGVTZXJ2ZXIgPSBfdGxzX3dyYXAuY3JlYXRlU2VydmVyO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfQ0lQSEVSUyA9IF90bHNfd3JhcC5ERUZBVUxUX0NJUEhFUlM7XG5leHBvcnQgY29uc3QgVExTU29ja2V0ID0gX3Rsc193cmFwLlRMU1NvY2tldDtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwRUFBMEU7QUFDMUUsNEVBQTRFO0FBRTVFLFNBQVMsY0FBYyxRQUFRLGNBQWM7QUFDN0MsT0FBTyxpQkFBaUIsbUJBQW1CO0FBQzNDLE9BQU8sZUFBZSxpQkFBaUI7QUFFdkMsb0JBQW9CO0FBQ3BCLE1BQU0sWUFBWTtJQUNoQixhQUFhLElBQUk7SUFDakIscUJBQXFCO0lBQ3JCLHFCQUFxQjtJQUNyQixpQ0FBaUM7SUFDakMsaUNBQWlDO0lBQ2pDLGlDQUNFO0lBQ0YsK0JBQStCO0lBQy9CLCtCQUErQjtJQUMvQiwrQkFBK0I7SUFDL0IsMEJBQTBCO0lBQzFCLDBCQUEwQjtJQUMxQixnQ0FBZ0M7QUFDbEM7QUFFQSxPQUFPLFNBQVMsYUFBYTtJQUMzQix3REFBd0Q7SUFDeEQsT0FBTyxPQUFPLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLE9BQVMsS0FBSyxXQUFXO0FBQzlELENBQUM7QUFFRCxPQUFPLE1BQU0sbUJBQW1CLFVBQVU7QUFDMUMsT0FBTyxNQUFNLHFCQUFxQixPQUFPO0FBQ3pDLE9BQU8sTUFBTSxzQkFBc0IsVUFBVTtBQUM3QyxPQUFPLE1BQU0sc0JBQXNCLFVBQVU7QUFFN0MsT0FBTyxNQUFNO0FBQWMsQ0FBQztBQUM1QixPQUFPLE1BQU07QUFBWSxDQUFDO0FBQzFCLE9BQU8sTUFBTSxTQUFTLFVBQVUsTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sU0FBUyxtQkFBbUI7SUFDakMsZUFBZTtBQUNqQixDQUFDO0FBRUQsZUFBZTtJQUNiO0lBQ0E7SUFDQTtJQUNBLFdBQVcsVUFBVSxTQUFTO0lBQzlCLHFCQUFxQixVQUFVLG1CQUFtQjtJQUNsRCxTQUFTLFVBQVUsT0FBTztJQUMxQixxQkFBcUIsWUFBWSxtQkFBbUI7SUFDcEQ7SUFDQSxjQUFjLFVBQVUsWUFBWTtJQUNwQztJQUNBO0lBQ0EsaUJBQWlCLFVBQVUsZUFBZTtJQUMxQztJQUNBO0lBQ0E7QUFDRixFQUFFO0FBRUYsT0FBTyxNQUFNLHNCQUFzQixVQUFVLG1CQUFtQixDQUFDO0FBQ2pFLE9BQU8sTUFBTSxVQUFVLFVBQVUsT0FBTyxDQUFDO0FBQ3pDLE9BQU8sTUFBTSxzQkFBc0IsWUFBWSxtQkFBbUIsQ0FBQztBQUNuRSxPQUFPLE1BQU0sZUFBZSxVQUFVLFlBQVksQ0FBQztBQUNuRCxPQUFPLE1BQU0sa0JBQWtCLFVBQVUsZUFBZSxDQUFDO0FBQ3pELE9BQU8sTUFBTSxZQUFZLFVBQVUsU0FBUyxDQUFDIn0=
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
import { makeCallback } from "./_fs_common.ts";
import { getValidatedPath, getValidMode } from "../internal/fs/utils.mjs";
import { fs } from "../internal_binding/constants.ts";
import { codeMap } from "../internal_binding/uv.ts";
import { promisify } from "../internal/util.mjs";
export function copyFile(src, dest, mode, callback) {
    if (typeof mode === "function") {
        callback = mode;
        mode = 0;
    }
    const srcStr = getValidatedPath(src, "src").toString();
    const destStr = getValidatedPath(dest, "dest").toString();
    const modeNum = getValidMode(mode, "copyFile");
    const cb = makeCallback(callback);
    if ((modeNum & fs.COPYFILE_EXCL) === fs.COPYFILE_EXCL) {
        Deno.lstat(destStr).then(()=>{
            // deno-lint-ignore no-explicit-any
            const e = new Error(`EEXIST: file already exists, copyfile '${srcStr}' -> '${destStr}'`);
            e.syscall = "copyfile";
            e.errno = codeMap.get("EEXIST");
            e.code = "EEXIST";
            cb(e);
        }, (e)=>{
            if (e instanceof Deno.errors.NotFound) {
                Deno.copyFile(srcStr, destStr).then(()=>cb(null), cb);
            }
            cb(e);
        });
    } else {
        Deno.copyFile(srcStr, destStr).then(()=>cb(null), cb);
    }
}
export const copyFilePromise = promisify(copyFile);
export function copyFileSync(src, dest, mode) {
    const srcStr = getValidatedPath(src, "src").toString();
    const destStr = getValidatedPath(dest, "dest").toString();
    const modeNum = getValidMode(mode, "copyFile");
    if ((modeNum & fs.COPYFILE_EXCL) === fs.COPYFILE_EXCL) {
        try {
            Deno.lstatSync(destStr);
            throw new Error(`A file exists at the destination: ${destStr}`);
        } catch (e) {
            if (e instanceof Deno.errors.NotFound) {
                Deno.copyFileSync(srcStr, destStr);
            }
            throw e;
        }
    } else {
        Deno.copyFileSync(srcStr, destStr);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjE2Ny4wL25vZGUvX2ZzL19mc19jb3B5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5pbXBvcnQgdHlwZSB7IENhbGxiYWNrV2l0aEVycm9yIH0gZnJvbSBcIi4vX2ZzX2NvbW1vbi50c1wiO1xuaW1wb3J0IHsgbWFrZUNhbGxiYWNrIH0gZnJvbSBcIi4vX2ZzX2NvbW1vbi50c1wiO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcIi4uL2J1ZmZlci50c1wiO1xuaW1wb3J0IHsgZ2V0VmFsaWRhdGVkUGF0aCwgZ2V0VmFsaWRNb2RlIH0gZnJvbSBcIi4uL2ludGVybmFsL2ZzL3V0aWxzLm1qc1wiO1xuaW1wb3J0IHsgZnMgfSBmcm9tIFwiLi4vaW50ZXJuYWxfYmluZGluZy9jb25zdGFudHMudHNcIjtcbmltcG9ydCB7IGNvZGVNYXAgfSBmcm9tIFwiLi4vaW50ZXJuYWxfYmluZGluZy91di50c1wiO1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSBcIi4uL2ludGVybmFsL3V0aWwubWpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5RmlsZShcbiAgc3JjOiBzdHJpbmcgfCBCdWZmZXIgfCBVUkwsXG4gIGRlc3Q6IHN0cmluZyB8IEJ1ZmZlciB8IFVSTCxcbiAgY2FsbGJhY2s6IENhbGxiYWNrV2l0aEVycm9yLFxuKTogdm9pZDtcbmV4cG9ydCBmdW5jdGlvbiBjb3B5RmlsZShcbiAgc3JjOiBzdHJpbmcgfCBCdWZmZXIgfCBVUkwsXG4gIGRlc3Q6IHN0cmluZyB8IEJ1ZmZlciB8IFVSTCxcbiAgbW9kZTogbnVtYmVyLFxuICBjYWxsYmFjazogQ2FsbGJhY2tXaXRoRXJyb3IsXG4pOiB2b2lkO1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHlGaWxlKFxuICBzcmM6IHN0cmluZyB8IEJ1ZmZlciB8IFVSTCxcbiAgZGVzdDogc3RyaW5nIHwgQnVmZmVyIHwgVVJMLFxuICBtb2RlOiBudW1iZXIgfCBDYWxsYmFja1dpdGhFcnJvcixcbiAgY2FsbGJhY2s/OiBDYWxsYmFja1dpdGhFcnJvcixcbikge1xuICBpZiAodHlwZW9mIG1vZGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNhbGxiYWNrID0gbW9kZTtcbiAgICBtb2RlID0gMDtcbiAgfVxuICBjb25zdCBzcmNTdHIgPSBnZXRWYWxpZGF0ZWRQYXRoKHNyYywgXCJzcmNcIikudG9TdHJpbmcoKTtcbiAgY29uc3QgZGVzdFN0ciA9IGdldFZhbGlkYXRlZFBhdGgoZGVzdCwgXCJkZXN0XCIpLnRvU3RyaW5nKCk7XG4gIGNvbnN0IG1vZGVOdW0gPSBnZXRWYWxpZE1vZGUobW9kZSwgXCJjb3B5RmlsZVwiKTtcbiAgY29uc3QgY2IgPSBtYWtlQ2FsbGJhY2soY2FsbGJhY2spO1xuXG4gIGlmICgobW9kZU51bSAmIGZzLkNPUFlGSUxFX0VYQ0wpID09PSBmcy5DT1BZRklMRV9FWENMKSB7XG4gICAgRGVuby5sc3RhdChkZXN0U3RyKS50aGVuKCgpID0+IHtcbiAgICAgIC8vIGRlbm8tbGludC1pZ25vcmUgbm8tZXhwbGljaXQtYW55XG4gICAgICBjb25zdCBlOiBhbnkgPSBuZXcgRXJyb3IoXG4gICAgICAgIGBFRVhJU1Q6IGZpbGUgYWxyZWFkeSBleGlzdHMsIGNvcHlmaWxlICcke3NyY1N0cn0nIC0+ICcke2Rlc3RTdHJ9J2AsXG4gICAgICApO1xuICAgICAgZS5zeXNjYWxsID0gXCJjb3B5ZmlsZVwiO1xuICAgICAgZS5lcnJubyA9IGNvZGVNYXAuZ2V0KFwiRUVYSVNUXCIpO1xuICAgICAgZS5jb2RlID0gXCJFRVhJU1RcIjtcbiAgICAgIGNiKGUpO1xuICAgIH0sIChlKSA9PiB7XG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIERlbm8uZXJyb3JzLk5vdEZvdW5kKSB7XG4gICAgICAgIERlbm8uY29weUZpbGUoc3JjU3RyLCBkZXN0U3RyKS50aGVuKCgpID0+IGNiKG51bGwpLCBjYik7XG4gICAgICB9XG4gICAgICBjYihlKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBEZW5vLmNvcHlGaWxlKHNyY1N0ciwgZGVzdFN0cikudGhlbigoKSA9PiBjYihudWxsKSwgY2IpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBjb3B5RmlsZVByb21pc2UgPSBwcm9taXNpZnkoY29weUZpbGUpIGFzIChcbiAgc3JjOiBzdHJpbmcgfCBCdWZmZXIgfCBVUkwsXG4gIGRlc3Q6IHN0cmluZyB8IEJ1ZmZlciB8IFVSTCxcbiAgbW9kZT86IG51bWJlcixcbikgPT4gUHJvbWlzZTx2b2lkPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHlGaWxlU3luYyhcbiAgc3JjOiBzdHJpbmcgfCBCdWZmZXIgfCBVUkwsXG4gIGRlc3Q6IHN0cmluZyB8IEJ1ZmZlciB8IFVSTCxcbiAgbW9kZT86IG51bWJlcixcbikge1xuICBjb25zdCBzcmNTdHIgPSBnZXRWYWxpZGF0ZWRQYXRoKHNyYywgXCJzcmNcIikudG9TdHJpbmcoKTtcbiAgY29uc3QgZGVzdFN0ciA9IGdldFZhbGlkYXRlZFBhdGgoZGVzdCwgXCJkZXN0XCIpLnRvU3RyaW5nKCk7XG4gIGNvbnN0IG1vZGVOdW0gPSBnZXRWYWxpZE1vZGUobW9kZSwgXCJjb3B5RmlsZVwiKTtcblxuICBpZiAoKG1vZGVOdW0gJiBmcy5DT1BZRklMRV9FWENMKSA9PT0gZnMuQ09QWUZJTEVfRVhDTCkge1xuICAgIHRyeSB7XG4gICAgICBEZW5vLmxzdGF0U3luYyhkZXN0U3RyKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQSBmaWxlIGV4aXN0cyBhdCB0aGUgZGVzdGluYXRpb246ICR7ZGVzdFN0cn1gKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIERlbm8uZXJyb3JzLk5vdEZvdW5kKSB7XG4gICAgICAgIERlbm8uY29weUZpbGVTeW5jKHNyY1N0ciwgZGVzdFN0cik7XG4gICAgICB9XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBEZW5vLmNvcHlGaWxlU3luYyhzcmNTdHIsIGRlc3RTdHIpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEVBQTBFO0FBRTFFLFNBQVMsWUFBWSxRQUFRLGtCQUFrQjtBQUUvQyxTQUFTLGdCQUFnQixFQUFFLFlBQVksUUFBUSwyQkFBMkI7QUFDMUUsU0FBUyxFQUFFLFFBQVEsbUNBQW1DO0FBQ3RELFNBQVMsT0FBTyxRQUFRLDRCQUE0QjtBQUNwRCxTQUFTLFNBQVMsUUFBUSx1QkFBdUI7QUFhakQsT0FBTyxTQUFTLFNBQ2QsR0FBMEIsRUFDMUIsSUFBMkIsRUFDM0IsSUFBZ0MsRUFDaEMsUUFBNEIsRUFDNUI7SUFDQSxJQUFJLE9BQU8sU0FBUyxZQUFZO1FBQzlCLFdBQVc7UUFDWCxPQUFPO0lBQ1QsQ0FBQztJQUNELE1BQU0sU0FBUyxpQkFBaUIsS0FBSyxPQUFPLFFBQVE7SUFDcEQsTUFBTSxVQUFVLGlCQUFpQixNQUFNLFFBQVEsUUFBUTtJQUN2RCxNQUFNLFVBQVUsYUFBYSxNQUFNO0lBQ25DLE1BQU0sS0FBSyxhQUFhO0lBRXhCLElBQUksQ0FBQyxVQUFVLEdBQUcsYUFBYSxNQUFNLEdBQUcsYUFBYSxFQUFFO1FBQ3JELEtBQUssS0FBSyxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQU07WUFDN0IsbUNBQW1DO1lBQ25DLE1BQU0sSUFBUyxJQUFJLE1BQ2pCLENBQUMsdUNBQXVDLEVBQUUsT0FBTyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFFckUsRUFBRSxPQUFPLEdBQUc7WUFDWixFQUFFLEtBQUssR0FBRyxRQUFRLEdBQUcsQ0FBQztZQUN0QixFQUFFLElBQUksR0FBRztZQUNULEdBQUc7UUFDTCxHQUFHLENBQUMsSUFBTTtZQUNSLElBQUksYUFBYSxLQUFLLE1BQU0sQ0FBQyxRQUFRLEVBQUU7Z0JBQ3JDLEtBQUssUUFBUSxDQUFDLFFBQVEsU0FBUyxJQUFJLENBQUMsSUFBTSxHQUFHLElBQUksR0FBRztZQUN0RCxDQUFDO1lBQ0QsR0FBRztRQUNMO0lBQ0YsT0FBTztRQUNMLEtBQUssUUFBUSxDQUFDLFFBQVEsU0FBUyxJQUFJLENBQUMsSUFBTSxHQUFHLElBQUksR0FBRztJQUN0RCxDQUFDO0FBQ0gsQ0FBQztBQUVELE9BQU8sTUFBTSxrQkFBa0IsVUFBVSxVQUl0QjtBQUVuQixPQUFPLFNBQVMsYUFDZCxHQUEwQixFQUMxQixJQUEyQixFQUMzQixJQUFhLEVBQ2I7SUFDQSxNQUFNLFNBQVMsaUJBQWlCLEtBQUssT0FBTyxRQUFRO0lBQ3BELE1BQU0sVUFBVSxpQkFBaUIsTUFBTSxRQUFRLFFBQVE7SUFDdkQsTUFBTSxVQUFVLGFBQWEsTUFBTTtJQUVuQyxJQUFJLENBQUMsVUFBVSxHQUFHLGFBQWEsTUFBTSxHQUFHLGFBQWEsRUFBRTtRQUNyRCxJQUFJO1lBQ0YsS0FBSyxTQUFTLENBQUM7WUFDZixNQUFNLElBQUksTUFBTSxDQUFDLGtDQUFrQyxFQUFFLFFBQVEsQ0FBQyxFQUFFO1FBQ2xFLEVBQUUsT0FBTyxHQUFHO1lBQ1YsSUFBSSxhQUFhLEtBQUssTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDckMsS0FBSyxZQUFZLENBQUMsUUFBUTtZQUM1QixDQUFDO1lBQ0QsTUFBTSxFQUFFO1FBQ1Y7SUFDRixPQUFPO1FBQ0wsS0FBSyxZQUFZLENBQUMsUUFBUTtJQUM1QixDQUFDO0FBQ0gsQ0FBQyJ9
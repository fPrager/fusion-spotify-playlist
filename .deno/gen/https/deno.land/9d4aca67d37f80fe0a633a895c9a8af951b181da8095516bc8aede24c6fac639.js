// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
import { setUnrefTimeout, Timeout } from "./internal/timers.mjs";
import { validateFunction } from "./internal/validators.mjs";
import { promisify } from "./internal/util.mjs";
export { setUnrefTimeout } from "./internal/timers.mjs";
const clearTimeout_ = globalThis.clearTimeout;
const clearInterval_ = globalThis.clearInterval;
export function setTimeout(callback, timeout, ...args) {
    validateFunction(callback, "callback");
    return new Timeout(callback, timeout, args, false, true);
}
Object.defineProperty(setTimeout, promisify.custom, {
    value: (timeout, ...args)=>{
        return new Promise((cb)=>setTimeout(cb, timeout, ...args));
    },
    enumerable: true
});
export function clearTimeout(timeout) {
    if (timeout == null) {
        return;
    }
    clearTimeout_(+timeout);
}
export function setInterval(callback, timeout, ...args) {
    validateFunction(callback, "callback");
    return new Timeout(callback, timeout, args, true, true);
}
export function clearInterval(timeout) {
    if (timeout == null) {
        return;
    }
    clearInterval_(+timeout);
}
// TODO(bartlomieju): implement the 'NodeJS.Immediate' versions of the timers.
// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/1163ead296d84e7a3c80d71e7c81ecbd1a130e9a/types/node/v12/globals.d.ts#L1120-L1131
export const setImmediate = (cb, ...args)=>setTimeout(cb, 0, ...args);
export const clearImmediate = clearTimeout;
export default {
    setTimeout,
    clearTimeout,
    setInterval,
    clearInterval,
    setImmediate,
    setUnrefTimeout,
    clearImmediate
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjE2Ny4wL25vZGUvdGltZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5cbmltcG9ydCB7IHNldFVucmVmVGltZW91dCwgVGltZW91dCB9IGZyb20gXCIuL2ludGVybmFsL3RpbWVycy5tanNcIjtcbmltcG9ydCB7IHZhbGlkYXRlRnVuY3Rpb24gfSBmcm9tIFwiLi9pbnRlcm5hbC92YWxpZGF0b3JzLm1qc1wiO1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSBcIi4vaW50ZXJuYWwvdXRpbC5tanNcIjtcbmV4cG9ydCB7IHNldFVucmVmVGltZW91dCB9IGZyb20gXCIuL2ludGVybmFsL3RpbWVycy5tanNcIjtcblxuY29uc3QgY2xlYXJUaW1lb3V0XyA9IGdsb2JhbFRoaXMuY2xlYXJUaW1lb3V0O1xuY29uc3QgY2xlYXJJbnRlcnZhbF8gPSBnbG9iYWxUaGlzLmNsZWFySW50ZXJ2YWw7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRUaW1lb3V0KFxuICBjYWxsYmFjazogKC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdm9pZCxcbiAgdGltZW91dD86IG51bWJlcixcbiAgLi4uYXJnczogdW5rbm93bltdXG4pIHtcbiAgdmFsaWRhdGVGdW5jdGlvbihjYWxsYmFjaywgXCJjYWxsYmFja1wiKTtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGNhbGxiYWNrLCB0aW1lb3V0LCBhcmdzLCBmYWxzZSwgdHJ1ZSk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZXRUaW1lb3V0LCBwcm9taXNpZnkuY3VzdG9tLCB7XG4gIHZhbHVlOiAodGltZW91dDogbnVtYmVyLCAuLi5hcmdzOiB1bmtub3duW10pID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKGNiKSA9PiBzZXRUaW1lb3V0KGNiLCB0aW1lb3V0LCAuLi5hcmdzKSk7XG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG59KTtcbmV4cG9ydCBmdW5jdGlvbiBjbGVhclRpbWVvdXQodGltZW91dD86IFRpbWVvdXQgfCBudW1iZXIpIHtcbiAgaWYgKHRpbWVvdXQgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjbGVhclRpbWVvdXRfKCt0aW1lb3V0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRJbnRlcnZhbChcbiAgY2FsbGJhY2s6ICguLi5hcmdzOiB1bmtub3duW10pID0+IHZvaWQsXG4gIHRpbWVvdXQ/OiBudW1iZXIsXG4gIC4uLmFyZ3M6IHVua25vd25bXVxuKSB7XG4gIHZhbGlkYXRlRnVuY3Rpb24oY2FsbGJhY2ssIFwiY2FsbGJhY2tcIik7XG4gIHJldHVybiBuZXcgVGltZW91dChjYWxsYmFjaywgdGltZW91dCwgYXJncywgdHJ1ZSwgdHJ1ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xlYXJJbnRlcnZhbCh0aW1lb3V0PzogVGltZW91dCB8IG51bWJlciB8IHN0cmluZykge1xuICBpZiAodGltZW91dCA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNsZWFySW50ZXJ2YWxfKCt0aW1lb3V0KTtcbn1cbi8vIFRPRE8oYmFydGxvbWllanUpOiBpbXBsZW1lbnQgdGhlICdOb2RlSlMuSW1tZWRpYXRlJyB2ZXJzaW9ucyBvZiB0aGUgdGltZXJzLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0RlZmluaXRlbHlUeXBlZC9EZWZpbml0ZWx5VHlwZWQvYmxvYi8xMTYzZWFkMjk2ZDg0ZTdhM2M4MGQ3MWU3YzgxZWNiZDFhMTMwZTlhL3R5cGVzL25vZGUvdjEyL2dsb2JhbHMuZC50cyNMMTEyMC1MMTEzMVxuZXhwb3J0IGNvbnN0IHNldEltbWVkaWF0ZSA9IChcbiAgY2I6ICguLi5hcmdzOiB1bmtub3duW10pID0+IHZvaWQsXG4gIC4uLmFyZ3M6IHVua25vd25bXVxuKTogVGltZW91dCA9PiBzZXRUaW1lb3V0KGNiLCAwLCAuLi5hcmdzKTtcbmV4cG9ydCBjb25zdCBjbGVhckltbWVkaWF0ZSA9IGNsZWFyVGltZW91dDtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzZXRUaW1lb3V0LFxuICBjbGVhclRpbWVvdXQsXG4gIHNldEludGVydmFsLFxuICBjbGVhckludGVydmFsLFxuICBzZXRJbW1lZGlhdGUsXG4gIHNldFVucmVmVGltZW91dCxcbiAgY2xlYXJJbW1lZGlhdGUsXG59O1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBFQUEwRTtBQUUxRSxTQUFTLGVBQWUsRUFBRSxPQUFPLFFBQVEsd0JBQXdCO0FBQ2pFLFNBQVMsZ0JBQWdCLFFBQVEsNEJBQTRCO0FBQzdELFNBQVMsU0FBUyxRQUFRLHNCQUFzQjtBQUNoRCxTQUFTLGVBQWUsUUFBUSx3QkFBd0I7QUFFeEQsTUFBTSxnQkFBZ0IsV0FBVyxZQUFZO0FBQzdDLE1BQU0saUJBQWlCLFdBQVcsYUFBYTtBQUUvQyxPQUFPLFNBQVMsV0FDZCxRQUFzQyxFQUN0QyxPQUFnQixFQUNoQixHQUFHLElBQWUsRUFDbEI7SUFDQSxpQkFBaUIsVUFBVTtJQUMzQixPQUFPLElBQUksUUFBUSxVQUFVLFNBQVMsTUFBTSxLQUFLLEVBQUUsSUFBSTtBQUN6RCxDQUFDO0FBRUQsT0FBTyxjQUFjLENBQUMsWUFBWSxVQUFVLE1BQU0sRUFBRTtJQUNsRCxPQUFPLENBQUMsU0FBaUIsR0FBRyxPQUFvQjtRQUM5QyxPQUFPLElBQUksUUFBUSxDQUFDLEtBQU8sV0FBVyxJQUFJLFlBQVk7SUFDeEQ7SUFDQSxZQUFZLElBQUk7QUFDbEI7QUFDQSxPQUFPLFNBQVMsYUFBYSxPQUEwQixFQUFFO0lBQ3ZELElBQUksV0FBVyxJQUFJLEVBQUU7UUFDbkI7SUFDRixDQUFDO0lBQ0QsY0FBYyxDQUFDO0FBQ2pCLENBQUM7QUFDRCxPQUFPLFNBQVMsWUFDZCxRQUFzQyxFQUN0QyxPQUFnQixFQUNoQixHQUFHLElBQWUsRUFDbEI7SUFDQSxpQkFBaUIsVUFBVTtJQUMzQixPQUFPLElBQUksUUFBUSxVQUFVLFNBQVMsTUFBTSxJQUFJLEVBQUUsSUFBSTtBQUN4RCxDQUFDO0FBQ0QsT0FBTyxTQUFTLGNBQWMsT0FBbUMsRUFBRTtJQUNqRSxJQUFJLFdBQVcsSUFBSSxFQUFFO1FBQ25CO0lBQ0YsQ0FBQztJQUNELGVBQWUsQ0FBQztBQUNsQixDQUFDO0FBQ0QsOEVBQThFO0FBQzlFLDJJQUEySTtBQUMzSSxPQUFPLE1BQU0sZUFBZSxDQUMxQixJQUNBLEdBQUcsT0FDUyxXQUFXLElBQUksTUFBTSxNQUFNO0FBQ3pDLE9BQU8sTUFBTSxpQkFBaUIsYUFBYTtBQUUzQyxlQUFlO0lBQ2I7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7QUFDRixFQUFFIn0=
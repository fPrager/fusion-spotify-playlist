// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
import { promises } from "../dns.ts";
export const { getServers , lookup , resolve , resolve4 , resolve6 , resolveAny , resolveCaa , resolveCname , resolveMx , resolveNaptr , resolveNs , resolvePtr , Resolver , resolveSoa , resolveSrv , resolveTxt , reverse , setDefaultResultOrder , setServers , // ERROR CODES
NODATA , FORMERR , SERVFAIL , NOTFOUND , NOTIMP , REFUSED , BADQUERY , BADNAME , BADFAMILY , BADRESP , CONNREFUSED , TIMEOUT , EOF , FILE , NOMEM , DESTRUCTION , BADSTR , BADFLAGS , NONAME , BADHINTS , NOTINITIALIZED , LOADIPHLPAPI , ADDRGETNETWORKPARAMS , CANCELLED  } = promises;
export default promises;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjE2Ny4wL25vZGUvZG5zL3Byb21pc2VzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbmltcG9ydCB7IHByb21pc2VzIH0gZnJvbSBcIi4uL2Rucy50c1wiO1xuZXhwb3J0IGNvbnN0IHtcbiAgZ2V0U2VydmVycyxcbiAgbG9va3VwLFxuICByZXNvbHZlLFxuICByZXNvbHZlNCxcbiAgcmVzb2x2ZTYsXG4gIHJlc29sdmVBbnksXG4gIHJlc29sdmVDYWEsXG4gIHJlc29sdmVDbmFtZSxcbiAgcmVzb2x2ZU14LFxuICByZXNvbHZlTmFwdHIsXG4gIHJlc29sdmVOcyxcbiAgcmVzb2x2ZVB0cixcbiAgUmVzb2x2ZXIsXG4gIHJlc29sdmVTb2EsXG4gIHJlc29sdmVTcnYsXG4gIHJlc29sdmVUeHQsXG4gIHJldmVyc2UsXG4gIHNldERlZmF1bHRSZXN1bHRPcmRlcixcbiAgc2V0U2VydmVycyxcblxuICAvLyBFUlJPUiBDT0RFU1xuICBOT0RBVEEsXG4gIEZPUk1FUlIsXG4gIFNFUlZGQUlMLFxuICBOT1RGT1VORCxcbiAgTk9USU1QLFxuICBSRUZVU0VELFxuICBCQURRVUVSWSxcbiAgQkFETkFNRSxcbiAgQkFERkFNSUxZLFxuICBCQURSRVNQLFxuICBDT05OUkVGVVNFRCxcbiAgVElNRU9VVCxcbiAgRU9GLFxuICBGSUxFLFxuICBOT01FTSxcbiAgREVTVFJVQ1RJT04sXG4gIEJBRFNUUixcbiAgQkFERkxBR1MsXG4gIE5PTkFNRSxcbiAgQkFESElOVFMsXG4gIE5PVElOSVRJQUxJWkVELFxuICBMT0FESVBITFBBUEksXG4gIEFERFJHRVRORVRXT1JLUEFSQU1TLFxuICBDQU5DRUxMRUQsXG59ID0gcHJvbWlzZXM7XG5leHBvcnQgZGVmYXVsdCBwcm9taXNlcztcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwRUFBMEU7QUFDMUUsc0RBQXNEO0FBQ3RELEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUsZ0VBQWdFO0FBQ2hFLHNFQUFzRTtBQUN0RSxzRUFBc0U7QUFDdEUsNEVBQTRFO0FBQzVFLHFFQUFxRTtBQUNyRSx3QkFBd0I7QUFDeEIsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSx5REFBeUQ7QUFDekQsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSw2REFBNkQ7QUFDN0QsNEVBQTRFO0FBQzVFLDJFQUEyRTtBQUMzRSx3RUFBd0U7QUFDeEUsNEVBQTRFO0FBQzVFLHlDQUF5QztBQUN6QyxTQUFTLFFBQVEsUUFBUSxZQUFZO0FBQ3JDLE9BQU8sTUFBTSxFQUNYLFdBQVUsRUFDVixPQUFNLEVBQ04sUUFBTyxFQUNQLFNBQVEsRUFDUixTQUFRLEVBQ1IsV0FBVSxFQUNWLFdBQVUsRUFDVixhQUFZLEVBQ1osVUFBUyxFQUNULGFBQVksRUFDWixVQUFTLEVBQ1QsV0FBVSxFQUNWLFNBQVEsRUFDUixXQUFVLEVBQ1YsV0FBVSxFQUNWLFdBQVUsRUFDVixRQUFPLEVBQ1Asc0JBQXFCLEVBQ3JCLFdBQVUsRUFFVixjQUFjO0FBQ2QsT0FBTSxFQUNOLFFBQU8sRUFDUCxTQUFRLEVBQ1IsU0FBUSxFQUNSLE9BQU0sRUFDTixRQUFPLEVBQ1AsU0FBUSxFQUNSLFFBQU8sRUFDUCxVQUFTLEVBQ1QsUUFBTyxFQUNQLFlBQVcsRUFDWCxRQUFPLEVBQ1AsSUFBRyxFQUNILEtBQUksRUFDSixNQUFLLEVBQ0wsWUFBVyxFQUNYLE9BQU0sRUFDTixTQUFRLEVBQ1IsT0FBTSxFQUNOLFNBQVEsRUFDUixlQUFjLEVBQ2QsYUFBWSxFQUNaLHFCQUFvQixFQUNwQixVQUFTLEVBQ1YsR0FBRyxTQUFTO0FBQ2IsZUFBZSxTQUFTIn0=
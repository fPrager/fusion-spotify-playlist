// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
import { lookup as defaultLookup } from "../dns.ts";
import { isInt32, validateFunction } from "./validators.mjs";
import { ERR_SOCKET_BAD_TYPE } from "./errors.ts";
import { UDP } from "../internal_binding/udp_wrap.ts";
import { guessHandleType } from "../internal_binding/util.ts";
import { codeMap } from "../internal_binding/uv.ts";
export const kStateSymbol = Symbol("kStateSymbol");
function lookup4(lookup, address, callback) {
    return lookup(address || "127.0.0.1", 4, callback);
}
function lookup6(lookup, address, callback) {
    return lookup(address || "::1", 6, callback);
}
export function newHandle(type, lookup) {
    if (lookup === undefined) {
        lookup = defaultLookup;
    } else {
        validateFunction(lookup, "lookup");
    }
    if (type === "udp4") {
        const handle = new UDP();
        handle.lookup = lookup4.bind(handle, lookup);
        return handle;
    }
    if (type === "udp6") {
        const handle1 = new UDP();
        handle1.lookup = lookup6.bind(handle1, lookup);
        handle1.bind = handle1.bind6;
        handle1.connect = handle1.connect6;
        handle1.send = handle1.send6;
        return handle1;
    }
    throw new ERR_SOCKET_BAD_TYPE();
}
export function _createSocketHandle(address, port, addressType, fd, flags) {
    const handle = newHandle(addressType);
    let err;
    if (isInt32(fd) && fd > 0) {
        const type = guessHandleType(fd);
        if (type !== "UDP") {
            err = codeMap.get("EINVAL");
        } else {
            err = handle.open(fd);
        }
    } else if (port || address) {
        err = handle.bind(address, port || 0, flags);
    }
    if (err) {
        handle.close();
        return err;
    }
    return handle;
}
export default {
    kStateSymbol,
    newHandle,
    _createSocketHandle
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjE2Ny4wL25vZGUvaW50ZXJuYWwvZGdyYW0udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiB0aGUgRGVubyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgeyBsb29rdXAgYXMgZGVmYXVsdExvb2t1cCB9IGZyb20gXCIuLi9kbnMudHNcIjtcbmltcG9ydCB7IGlzSW50MzIsIHZhbGlkYXRlRnVuY3Rpb24gfSBmcm9tIFwiLi92YWxpZGF0b3JzLm1qc1wiO1xuaW1wb3J0IHR5cGUgeyBFcnJub0V4Y2VwdGlvbiB9IGZyb20gXCIuL2Vycm9ycy50c1wiO1xuaW1wb3J0IHsgRVJSX1NPQ0tFVF9CQURfVFlQRSB9IGZyb20gXCIuL2Vycm9ycy50c1wiO1xuaW1wb3J0IHsgVURQIH0gZnJvbSBcIi4uL2ludGVybmFsX2JpbmRpbmcvdWRwX3dyYXAudHNcIjtcbmltcG9ydCB7IGd1ZXNzSGFuZGxlVHlwZSB9IGZyb20gXCIuLi9pbnRlcm5hbF9iaW5kaW5nL3V0aWwudHNcIjtcbmltcG9ydCB7IGNvZGVNYXAgfSBmcm9tIFwiLi4vaW50ZXJuYWxfYmluZGluZy91di50c1wiO1xuXG5leHBvcnQgdHlwZSBTb2NrZXRUeXBlID0gXCJ1ZHA0XCIgfCBcInVkcDZcIjtcblxuZXhwb3J0IGNvbnN0IGtTdGF0ZVN5bWJvbDogdW5pcXVlIHN5bWJvbCA9IFN5bWJvbChcImtTdGF0ZVN5bWJvbFwiKTtcblxuZnVuY3Rpb24gbG9va3VwNChcbiAgbG9va3VwOiB0eXBlb2YgZGVmYXVsdExvb2t1cCxcbiAgYWRkcmVzczogc3RyaW5nLFxuICBjYWxsYmFjazogKFxuICAgIGVycjogRXJybm9FeGNlcHRpb24gfCBudWxsLFxuICAgIGFkZHJlc3M6IHN0cmluZyxcbiAgICBmYW1pbHk6IG51bWJlcixcbiAgKSA9PiB2b2lkLFxuKSB7XG4gIHJldHVybiBsb29rdXAoYWRkcmVzcyB8fCBcIjEyNy4wLjAuMVwiLCA0LCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIGxvb2t1cDYoXG4gIGxvb2t1cDogdHlwZW9mIGRlZmF1bHRMb29rdXAsXG4gIGFkZHJlc3M6IHN0cmluZyxcbiAgY2FsbGJhY2s6IChcbiAgICBlcnI6IEVycm5vRXhjZXB0aW9uIHwgbnVsbCxcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgZmFtaWx5OiBudW1iZXIsXG4gICkgPT4gdm9pZCxcbikge1xuICByZXR1cm4gbG9va3VwKGFkZHJlc3MgfHwgXCI6OjFcIiwgNiwgY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SGFuZGxlKFxuICB0eXBlOiBTb2NrZXRUeXBlLFxuICBsb29rdXA/OiB0eXBlb2YgZGVmYXVsdExvb2t1cCxcbik6IFVEUCB7XG4gIGlmIChsb29rdXAgPT09IHVuZGVmaW5lZCkge1xuICAgIGxvb2t1cCA9IGRlZmF1bHRMb29rdXA7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWRhdGVGdW5jdGlvbihsb29rdXAsIFwibG9va3VwXCIpO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09IFwidWRwNFwiKSB7XG4gICAgY29uc3QgaGFuZGxlID0gbmV3IFVEUCgpO1xuXG4gICAgaGFuZGxlLmxvb2t1cCA9IGxvb2t1cDQuYmluZChoYW5kbGUsIGxvb2t1cCk7XG5cbiAgICByZXR1cm4gaGFuZGxlO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09IFwidWRwNlwiKSB7XG4gICAgY29uc3QgaGFuZGxlID0gbmV3IFVEUCgpO1xuXG4gICAgaGFuZGxlLmxvb2t1cCA9IGxvb2t1cDYuYmluZChoYW5kbGUsIGxvb2t1cCk7XG4gICAgaGFuZGxlLmJpbmQgPSBoYW5kbGUuYmluZDY7XG4gICAgaGFuZGxlLmNvbm5lY3QgPSBoYW5kbGUuY29ubmVjdDY7XG4gICAgaGFuZGxlLnNlbmQgPSBoYW5kbGUuc2VuZDY7XG5cbiAgICByZXR1cm4gaGFuZGxlO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVSUl9TT0NLRVRfQkFEX1RZUEUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9jcmVhdGVTb2NrZXRIYW5kbGUoXG4gIGFkZHJlc3M6IHN0cmluZyxcbiAgcG9ydDogbnVtYmVyLFxuICBhZGRyZXNzVHlwZTogU29ja2V0VHlwZSxcbiAgZmQ6IG51bWJlcixcbiAgZmxhZ3M6IG51bWJlcixcbikge1xuICBjb25zdCBoYW5kbGUgPSBuZXdIYW5kbGUoYWRkcmVzc1R5cGUpO1xuICBsZXQgZXJyO1xuXG4gIGlmIChpc0ludDMyKGZkKSAmJiBmZCA+IDApIHtcbiAgICBjb25zdCB0eXBlID0gZ3Vlc3NIYW5kbGVUeXBlKGZkKTtcblxuICAgIGlmICh0eXBlICE9PSBcIlVEUFwiKSB7XG4gICAgICBlcnIgPSBjb2RlTWFwLmdldChcIkVJTlZBTFwiKSE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVyciA9IGhhbmRsZS5vcGVuKGZkKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocG9ydCB8fCBhZGRyZXNzKSB7XG4gICAgZXJyID0gaGFuZGxlLmJpbmQoYWRkcmVzcywgcG9ydCB8fCAwLCBmbGFncyk7XG4gIH1cblxuICBpZiAoZXJyKSB7XG4gICAgaGFuZGxlLmNsb3NlKCk7XG5cbiAgICByZXR1cm4gZXJyO1xuICB9XG5cbiAgcmV0dXJuIGhhbmRsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBrU3RhdGVTeW1ib2wsXG4gIG5ld0hhbmRs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
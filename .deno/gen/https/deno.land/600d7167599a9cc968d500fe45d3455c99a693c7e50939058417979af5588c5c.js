// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
// Copyright Node.js contributors. All rights reserved. MIT License.
import { existsSync } from "./_fs_exists.ts";
import { mkdir, mkdirSync } from "./_fs_mkdir.ts";
import { ERR_INVALID_ARG_TYPE, ERR_INVALID_OPT_VALUE_ENCODING } from "../internal/errors.ts";
import { promisify } from "../internal/util.mjs";
export function mkdtemp(prefix, optionsOrCallback, maybeCallback) {
    const callback = typeof optionsOrCallback == "function" ? optionsOrCallback : maybeCallback;
    if (!callback) {
        throw new ERR_INVALID_ARG_TYPE("callback", "function", callback);
    }
    const encoding = parseEncoding(optionsOrCallback);
    const path = tempDirPath(prefix);
    mkdir(path, {
        recursive: false,
        mode: 0o700
    }, (err)=>{
        if (err) callback(err);
        else callback(null, decode(path, encoding));
    });
}
export const mkdtempPromise = promisify(mkdtemp);
// https://nodejs.org/dist/latest-v15.x/docs/api/fs.html#fs_fs_mkdtempsync_prefix_options
export function mkdtempSync(prefix, options) {
    const encoding = parseEncoding(options);
    const path = tempDirPath(prefix);
    mkdirSync(path, {
        recursive: false,
        mode: 0o700
    });
    return decode(path, encoding);
}
function parseEncoding(optionsOrCallback) {
    let encoding;
    if (typeof optionsOrCallback == "function") encoding = undefined;
    else if (optionsOrCallback instanceof Object) {
        encoding = optionsOrCallback?.encoding;
    } else encoding = optionsOrCallback;
    if (encoding) {
        try {
            new TextDecoder(encoding);
        } catch  {
            throw new ERR_INVALID_OPT_VALUE_ENCODING(encoding);
        }
    }
    return encoding;
}
function decode(str, encoding) {
    if (!encoding) return str;
    else {
        const decoder = new TextDecoder(encoding);
        const encoder = new TextEncoder();
        return decoder.decode(encoder.encode(str));
    }
}
const CHARS = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
function randomName() {
    return [
        ...Array(6)
    ].map(()=>CHARS[Math.floor(Math.random() * CHARS.length)]).join("");
}
function tempDirPath(prefix) {
    let path;
    do {
        path = prefix + randomName();
    }while (existsSync(path))
    return path;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjE2Ny4wL25vZGUvX2ZzL19mc19ta2R0ZW1wLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG4vLyBDb3B5cmlnaHQgTm9kZS5qcyBjb250cmlidXRvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgZXhpc3RzU3luYyB9IGZyb20gXCIuL19mc19leGlzdHMudHNcIjtcbmltcG9ydCB7IG1rZGlyLCBta2RpclN5bmMgfSBmcm9tIFwiLi9fZnNfbWtkaXIudHNcIjtcbmltcG9ydCB7XG4gIEVSUl9JTlZBTElEX0FSR19UWVBFLFxuICBFUlJfSU5WQUxJRF9PUFRfVkFMVUVfRU5DT0RJTkcsXG59IGZyb20gXCIuLi9pbnRlcm5hbC9lcnJvcnMudHNcIjtcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gXCIuLi9pbnRlcm5hbC91dGlsLm1qc1wiO1xuXG5leHBvcnQgdHlwZSBta2R0ZW1wQ2FsbGJhY2sgPSAoXG4gIGVycjogRXJyb3IgfCBudWxsLFxuICBkaXJlY3Rvcnk/OiBzdHJpbmcsXG4pID0+IHZvaWQ7XG5cbi8vIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC12MTUueC9kb2NzL2FwaS9mcy5odG1sI2ZzX2ZzX21rZHRlbXBfcHJlZml4X29wdGlvbnNfY2FsbGJhY2tcbmV4cG9ydCBmdW5jdGlvbiBta2R0ZW1wKHByZWZpeDogc3RyaW5nLCBjYWxsYmFjazogbWtkdGVtcENhbGxiYWNrKTogdm9pZDtcbmV4cG9ydCBmdW5jdGlvbiBta2R0ZW1wKFxuICBwcmVmaXg6IHN0cmluZyxcbiAgb3B0aW9uczogeyBlbmNvZGluZzogc3RyaW5nIH0gfCBzdHJpbmcsXG4gIGNhbGxiYWNrOiBta2R0ZW1wQ2FsbGJhY2ssXG4pOiB2b2lkO1xuZXhwb3J0IGZ1bmN0aW9uIG1rZHRlbXAoXG4gIHByZWZpeDogc3RyaW5nLFxuICBvcHRpb25zT3JDYWxsYmFjazogeyBlbmNvZGluZzogc3RyaW5nIH0gfCBzdHJpbmcgfCBta2R0ZW1wQ2FsbGJhY2ssXG4gIG1heWJlQ2FsbGJhY2s/OiBta2R0ZW1wQ2FsbGJhY2ssXG4pIHtcbiAgY29uc3QgY2FsbGJhY2s6IG1rZHRlbXBDYWxsYmFjayB8IHVuZGVmaW5lZCA9XG4gICAgdHlwZW9mIG9wdGlvbnNPckNhbGxiYWNrID09IFwiZnVuY3Rpb25cIiA/IG9wdGlvbnNPckNhbGxiYWNrIDogbWF5YmVDYWxsYmFjaztcbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRShcImNhbGxiYWNrXCIsIFwiZnVuY3Rpb25cIiwgY2FsbGJhY2spO1xuICB9XG5cbiAgY29uc3QgZW5jb2Rpbmc6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHBhcnNlRW5jb2Rpbmcob3B0aW9uc09yQ2FsbGJhY2spO1xuICBjb25zdCBwYXRoID0gdGVtcERpclBhdGgocHJlZml4KTtcblxuICBta2RpcihcbiAgICBwYXRoLFxuICAgIHsgcmVjdXJzaXZlOiBmYWxzZSwgbW9kZTogMG83MDAgfSxcbiAgICAoZXJyOiBFcnJvciB8IG51bGwgfCB1bmRlZmluZWQpID0+IHtcbiAgICAgIGlmIChlcnIpIGNhbGxiYWNrKGVycik7XG4gICAgICBlbHNlIGNhbGxiYWNrKG51bGwsIGRlY29kZShwYXRoLCBlbmNvZGluZykpO1xuICAgIH0sXG4gICk7XG59XG5cbmV4cG9ydCBjb25zdCBta2R0ZW1wUHJvbWlzZSA9IHByb21pc2lmeShta2R0ZW1wKSBhcyAoXG4gIHByZWZpeDogc3RyaW5nLFxuICBvcHRpb25zPzogeyBlbmNvZGluZzogc3RyaW5nIH0gfCBzdHJpbmcsXG4pID0+IFByb21pc2U8c3RyaW5nPjtcblxuLy8gaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0LXYxNS54L2RvY3MvYXBpL2ZzLmh0bWwjZnNfZnNfbWtkdGVtcHN5bmNfcHJlZml4X29wdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiBta2R0ZW1wU3luYyhcbiAgcHJlZml4OiBzdHJpbmcsXG4gIG9wdGlvbnM/OiB7IGVuY29kaW5nOiBzdHJpbmcgfSB8IHN0cmluZyxcbik6IHN0cmluZyB7XG4gIGNvbnN0IGVuY29kaW5nOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBwYXJzZUVuY29kaW5nKG9wdGlvbnMpO1xuICBjb25zdCBwYXRoID0gdGVtcERpclBhdGgocHJlZml4KTtcblxuICBta2RpclN5bmMocGF0aCwgeyByZWN1cnNpdmU6IGZhbHNlLCBtb2RlOiAwbzcwMCB9KTtcbiAgcmV0dXJuIGRlY29kZShwYXRoLCBlbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRW5jb2RpbmcoXG4gIG9wdGlvbnNPckNhbGxiYWNrPzogeyBlbmNvZGluZzogc3RyaW5nIH0gfCBzdHJpbmcgfCBta2R0ZW1wQ2FsbGJhY2ssXG4pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICBsZXQgZW5jb2Rpbmc6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYWxsYmFjayA9PSBcImZ1bmN0aW9uXCIpIGVuY29kaW5nID0gdW5kZWZpbmVkO1xuICBlbHNlIGlmIChvcHRpb25zT3JDYWxsYmFjayBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgIGVuY29kaW5nID0gb3B0aW9uc09yQ2FsbGJhY2s/LmVuY29kaW5nO1xuICB9IGVsc2UgZW5jb2RpbmcgPSBvcHRpb25zT3JDYWxsYmFjaztcblxuICBpZiAoZW5jb2RpbmcpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IFRleHREZWNvZGVyKGVuY29kaW5nKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9PUFRfVkFMVUVfRU5DT0RJTkcoZW5jb2RpbmcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbmNvZGluZztcbn1cblxuZnVuY3Rpb24gZGVjb2RlKHN0cjogc3RyaW5nLCBlbmNvZGluZz86IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmICghZW5jb2RpbmcpIHJldHVybiBzdHI7XG4gIGVsc2Uge1xuICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoZW5jb2RpbmcpO1xuICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUoZW5jb2Rlci5lbmNvZGUoc3RyKSk7XG4gIH1cbn1cblxuY29uc3QgQ0hBUlMgPSBcIjAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXCI7XG5mdW5jdGlvbiByYW5kb21OYW1lKCk6IHN0cmluZyB7XG4gIHJldHVybiBbLi4uQXJyYXkoNildLm1hcCgoKSA9PlxuICAgIENIQVJTW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIENIQVJTLmxlbmd0aCldXG4gICkuam9pbihcIlwiKTtcbn1cblxuZnVuY3Rpb24gdGVtcERpclBhdGgocHJlZml4OiBzdHJpbmcpOiBzdHJpbmcge1xuICBsZXQgcGF0aDogc3RyaW5nO1xuICBkbyB7XG4gICAgcGF0aCA9IHByZWZpeCArIHJhbmRvbU5hbWUoKTtcbiAgfSB3aGlsZSAoZXhpc3RzU3luYyhwYXRoKSk7XG5cbiAgcmV0dXJuIHBhdGg7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEVBQTBFO0FBQzFFLG9FQUFvRTtBQUNwRSxTQUFTLFVBQVUsUUFBUSxrQkFBa0I7QUFDN0MsU0FBUyxLQUFLLEVBQUUsU0FBUyxRQUFRLGlCQUFpQjtBQUNsRCxTQUNFLG9CQUFvQixFQUNwQiw4QkFBOEIsUUFDekIsd0JBQXdCO0FBQy9CLFNBQVMsU0FBUyxRQUFRLHVCQUF1QjtBQWNqRCxPQUFPLFNBQVMsUUFDZCxNQUFjLEVBQ2QsaUJBQWtFLEVBQ2xFLGFBQStCLEVBQy9CO0lBQ0EsTUFBTSxXQUNKLE9BQU8scUJBQXFCLGFBQWEsb0JBQW9CLGFBQWE7SUFDNUUsSUFBSSxDQUFDLFVBQVU7UUFDYixNQUFNLElBQUkscUJBQXFCLFlBQVksWUFBWSxVQUFVO0lBQ25FLENBQUM7SUFFRCxNQUFNLFdBQStCLGNBQWM7SUFDbkQsTUFBTSxPQUFPLFlBQVk7SUFFekIsTUFDRSxNQUNBO1FBQUUsV0FBVyxLQUFLO1FBQUUsTUFBTTtJQUFNLEdBQ2hDLENBQUMsTUFBa0M7UUFDakMsSUFBSSxLQUFLLFNBQVM7YUFDYixTQUFTLElBQUksRUFBRSxPQUFPLE1BQU07SUFDbkM7QUFFSixDQUFDO0FBRUQsT0FBTyxNQUFNLGlCQUFpQixVQUFVLFNBR25CO0FBRXJCLHlGQUF5RjtBQUN6RixPQUFPLFNBQVMsWUFDZCxNQUFjLEVBQ2QsT0FBdUMsRUFDL0I7SUFDUixNQUFNLFdBQStCLGNBQWM7SUFDbkQsTUFBTSxPQUFPLFlBQVk7SUFFekIsVUFBVSxNQUFNO1FBQUUsV0FBVyxLQUFLO1FBQUUsTUFBTTtJQUFNO0lBQ2hELE9BQU8sT0FBTyxNQUFNO0FBQ3RCLENBQUM7QUFFRCxTQUFTLGNBQ1AsaUJBQW1FLEVBQy9DO0lBQ3BCLElBQUk7SUFDSixJQUFJLE9BQU8scUJBQXFCLFlBQVksV0FBVztTQUNsRCxJQUFJLDZCQUE2QixRQUFRO1FBQzVDLFdBQVcsbUJBQW1CO0lBQ2hDLE9BQU8sV0FBVztJQUVsQixJQUFJLFVBQVU7UUFDWixJQUFJO1lBQ0YsSUFBSSxZQUFZO1FBQ2xCLEVBQUUsT0FBTTtZQUNOLE1BQU0sSUFBSSwrQkFBK0IsVUFBVTtRQUNyRDtJQUNGLENBQUM7SUFFRCxPQUFPO0FBQ1Q7QUFFQSxTQUFTLE9BQU8sR0FBVyxFQUFFLFFBQWlCLEVBQVU7SUFDdEQsSUFBSSxDQUFDLFVBQVUsT0FBTztTQUNqQjtRQUNILE1BQU0sVUFBVSxJQUFJLFlBQVk7UUFDaEMsTUFBTSxVQUFVLElBQUk7UUFDcEIsT0FBTyxRQUFRLE1BQU0sQ0FBQyxRQUFRLE1BQU0sQ0FBQztJQUN2QyxDQUFDO0FBQ0g7QUFFQSxNQUFNLFFBQVE7QUFDZCxTQUFTLGFBQXFCO0lBQzVCLE9BQU87V0FBSSxNQUFNO0tBQUcsQ0FBQyxHQUFHLENBQUMsSUFDdkIsS0FBSyxDQUFDLEtBQUssS0FBSyxDQUFDLEtBQUssTUFBTSxLQUFLLE1BQU0sTUFBTSxFQUFFLEVBQy9DLElBQUksQ0FBQztBQUNUO0FBRUEsU0FBUyxZQUFZLE1BQWMsRUFBVTtJQUMzQyxJQUFJO0lBQ0osR0FBRztRQUNELE9BQU8sU0FBUztJQUNsQixRQUFTLFdBQVcsTUFBTztJQUUzQixPQUFPO0FBQ1QifQ==
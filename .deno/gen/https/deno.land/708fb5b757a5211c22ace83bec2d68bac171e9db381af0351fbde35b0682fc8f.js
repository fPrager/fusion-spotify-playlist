// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
import { getEncoding } from "./_fs_common.ts";
import { Buffer } from "../buffer.ts";
import { fromFileUrl } from "../path.ts";
import { promisify } from "../internal/util.mjs";
function maybeDecode(data, encoding) {
    const buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
    if (encoding && encoding !== "binary") return buffer.toString(encoding);
    return buffer;
}
export function readFile(path, optOrCallback, callback) {
    path = path instanceof URL ? fromFileUrl(path) : path;
    let cb;
    if (typeof optOrCallback === "function") {
        cb = optOrCallback;
    } else {
        cb = callback;
    }
    const encoding = getEncoding(optOrCallback);
    const p = Deno.readFile(path);
    if (cb) {
        p.then((data)=>{
            if (encoding && encoding !== "binary") {
                const text = maybeDecode(data, encoding);
                return cb(null, text);
            }
            const buffer = maybeDecode(data, encoding);
            cb(null, buffer);
        }, (err)=>cb && cb(err));
    }
}
export const readFilePromise = promisify(readFile);
export function readFileSync(path, opt) {
    path = path instanceof URL ? fromFileUrl(path) : path;
    const data = Deno.readFileSync(path);
    const encoding = getEncoding(opt);
    if (encoding && encoding !== "binary") {
        const text = maybeDecode(data, encoding);
        return text;
    }
    const buffer = maybeDecode(data, encoding);
    return buffer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjE2Ny4wL25vZGUvX2ZzL19mc19yZWFkRmlsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyIHRoZSBEZW5vIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHtcbiAgQmluYXJ5T3B0aW9uc0FyZ3VtZW50LFxuICBGaWxlT3B0aW9uc0FyZ3VtZW50LFxuICBnZXRFbmNvZGluZyxcbiAgVGV4dE9wdGlvbnNBcmd1bWVudCxcbn0gZnJvbSBcIi4vX2ZzX2NvbW1vbi50c1wiO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcIi4uL2J1ZmZlci50c1wiO1xuaW1wb3J0IHsgZnJvbUZpbGVVcmwgfSBmcm9tIFwiLi4vcGF0aC50c1wiO1xuaW1wb3J0IHsgQmluYXJ5RW5jb2RpbmdzLCBFbmNvZGluZ3MsIFRleHRFbmNvZGluZ3MgfSBmcm9tIFwiLi4vX3V0aWxzLnRzXCI7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tIFwiLi4vaW50ZXJuYWwvdXRpbC5tanNcIjtcblxuZnVuY3Rpb24gbWF5YmVEZWNvZGUoZGF0YTogVWludDhBcnJheSwgZW5jb2Rpbmc6IFRleHRFbmNvZGluZ3MpOiBzdHJpbmc7XG5mdW5jdGlvbiBtYXliZURlY29kZShcbiAgZGF0YTogVWludDhBcnJheSxcbiAgZW5jb2Rpbmc6IEJpbmFyeUVuY29kaW5ncyB8IG51bGwsXG4pOiBCdWZmZXI7XG5mdW5jdGlvbiBtYXliZURlY29kZShcbiAgZGF0YTogVWludDhBcnJheSxcbiAgZW5jb2Rpbmc6IEVuY29kaW5ncyB8IG51bGwsXG4pOiBzdHJpbmcgfCBCdWZmZXIge1xuICBjb25zdCBidWZmZXIgPSBCdWZmZXIuZnJvbShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpO1xuICBpZiAoZW5jb2RpbmcgJiYgZW5jb2RpbmcgIT09IFwiYmluYXJ5XCIpIHJldHVybiBidWZmZXIudG9TdHJpbmcoZW5jb2RpbmcpO1xuICByZXR1cm4gYnVmZmVyO1xufVxuXG50eXBlIFRleHRDYWxsYmFjayA9IChlcnI6IEVycm9yIHwgbnVsbCwgZGF0YT86IHN0cmluZykgPT4gdm9pZDtcbnR5cGUgQmluYXJ5Q2FsbGJhY2sgPSAoZXJyOiBFcnJvciB8IG51bGwsIGRhdGE/OiBCdWZmZXIpID0+IHZvaWQ7XG50eXBlIEdlbmVyaWNDYWxsYmFjayA9IChlcnI6IEVycm9yIHwgbnVsbCwgZGF0YT86IHN0cmluZyB8IEJ1ZmZlcikgPT4gdm9pZDtcbnR5cGUgQ2FsbGJhY2sgPSBUZXh0Q2FsbGJhY2sgfCBCaW5hcnlDYWxsYmFjayB8IEdlbmVyaWNDYWxsYmFjaztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaWxlKFxuICBwYXRoOiBzdHJpbmcgfCBVUkwsXG4gIG9wdGlvbnM6IFRleHRPcHRpb25zQXJndW1lbnQsXG4gIGNhbGxiYWNrOiBUZXh0Q2FsbGJhY2ssXG4pOiB2b2lkO1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaWxlKFxuICBwYXRoOiBzdHJpbmcgfCBVUkwsXG4gIG9wdGlvbnM6IEJpbmFyeU9wdGlvbnNBcmd1bWVudCxcbiAgY2FsbGJhY2s6IEJpbmFyeUNhbGxiYWNrLFxuKTogdm9pZDtcbmV4cG9ydCBmdW5jdGlvbiByZWFkRmlsZShcbiAgcGF0aDogc3RyaW5nIHwgVVJMLFxuICBvcHRpb25zOiBudWxsIHwgdW5kZWZpbmVkIHwgRmlsZU9wdGlvbnNBcmd1bWVudCxcbiAgY2FsbGJhY2s6IEJpbmFyeUNhbGxiYWNrLFxuKTogdm9pZDtcbmV4cG9ydCBmdW5jdGlvbiByZWFkRmlsZShwYXRoOiBzdHJpbmcgfCBVUkwsIGNhbGxiYWNrOiBCaW5hcnlDYWxsYmFjayk6IHZvaWQ7XG5leHBvcnQgZnVuY3Rpb24gcmVhZEZpbGUoXG4gIHBhdGg6IHN0cmluZyB8IFVSTCxcbiAgb3B0T3JDYWxsYmFjaz86IEZpbGVPcHRpb25zQXJndW1lbnQgfCBDYWxsYmFjayB8IG51bGwgfCB1bmRlZmluZWQsXG4gIGNhbGxiYWNrPzogQ2FsbGJhY2ssXG4pIHtcbiAgcGF0aCA9IHBhdGggaW5zdGFuY2VvZiBVUkwgPyBmcm9tRmlsZVVybChwYXRoKSA6IHBhdGg7XG4gIGxldCBjYjogQ2FsbGJhY2sgfCB1bmRlZmluZWQ7XG4gIGlmICh0eXBlb2Ygb3B0T3JDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2IgPSBvcHRPckNhbGxiYWNrO1xuICB9IGVsc2Uge1xuICAgIGNiID0gY2FsbGJhY2s7XG4gIH1cblxuICBjb25zdCBlbmNvZGluZyA9IGdldEVuY29kaW5nKG9wdE9yQ2FsbGJhY2spO1xuXG4gIGNvbnN0IHAgPSBEZW5vLnJlYWRGaWxlKHBhdGgpO1xuXG4gIGlmIChjYikge1xuICAgIHAudGhlbigoZGF0YTogVWludDhBcnJheSkgPT4ge1xuICAgICAgaWYgKGVuY29kaW5nICYmIGVuY29kaW5nICE9PSBcImJpbmFyeVwiKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBtYXliZURlY29kZShkYXRhLCBlbmNvZGluZyk7XG4gICAgICAgIHJldHVybiAoY2IgYXMgVGV4dENhbGxiYWNrKShudWxsLCB0ZXh0KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGJ1ZmZlciA9IG1heWJlRGVjb2RlKGRhdGEsIGVuY29kaW5nKTtcbiAgICAgIChjYiBhcyBCaW5hcnlDYWxsYmFjaykobnVsbCwgYnVmZmVyKTtcbiAgICB9LCAoZXJyKSA9PiBjYiAmJiBjYihlcnIpKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcmVhZEZpbGVQcm9taXNlID0gcHJvbWlzaWZ5KHJlYWRGaWxlKSBhcyAoXG4gICYgKChwYXRoOiBzdHJpbmcgfCBVUkwsIG9wdDogVGV4dE9wdGlvbnNBcmd1bWVudCkgPT4gUHJvbWlzZTxzdHJpbmc+KVxuICAmICgocGF0aDogc3RyaW5nIHwgVVJMLCBvcHQ/OiBCaW5hcnlPcHRpb25zQXJndW1lbnQpID0+IFByb21pc2U8QnVmZmVyPilcbiAgJiAoKHBhdGg6IHN0cmluZyB8IFVSTCwgb3B0PzogRmlsZU9wdGlvbnNBcmd1bWVudCkgPT4gUHJvbWlzZTxCdWZmZXI+KVxuKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaWxlU3luYyhcbiAgcGF0aDogc3RyaW5nIHwgVVJMLFxuICBvcHQ6IFRleHRPcHRpb25zQXJndW1lbnQsXG4pOiBzdHJpbmc7XG5leHBvcnQgZnVuY3Rpb24gcmVhZEZpbGVTeW5jKFxuICBwYXRoOiBzdHJpbmcgfCBVUkwsXG4gIG9wdD86IEJpbmFyeU9wdGlvbnNBcmd1bWVudCxcbik6IEJ1ZmZlcjtcbmV4cG9ydCBmdW5jdGlvbiByZWFkRmlsZVN5bmMoXG4gIHBhdGg6IHN0cmluZyB8IFVSTCxcbiAgb3B0PzogRmlsZU9wdGlvbnNBcmd1bWVudCxcbik6IHN0cmluZyB8IEJ1ZmZlciB7XG4gIHBhdGggPSBwYXRoIGluc3RhbmNlb2YgVVJMID8gZnJvbUZpbGVVcmwocGF0aCkgOiBwYXRoO1xuICBjb25zdCBkYXRhID0gRGVuby5yZWFkRmlsZVN5bmMocGF0aCk7XG4gIGNvbnN0IGVuY29kaW5nID0gZ2V0RW5jb2Rpbmcob3B0KTtcbiAgaWYgKGVuY29kaW5nICYmIGVuY29kaW5nICE9PSBcImJpbmFyeVwiKSB7XG4gICAgY29uc3QgdGV4dCA9IG1heWJlRGVjb2RlKGRhdGEsIGVuY29kaW5nKTtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuICBjb25zdCBidWZmZXIgPSBtYXliZURlY29kZShkYXRhLCBlbmNvZGluZyk7XG4gIHJldHVybiBidWZmZXI7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEVBQTBFO0FBQzFFLFNBR0UsV0FBVyxRQUVOLGtCQUFrQjtBQUN6QixTQUFTLE1BQU0sUUFBUSxlQUFlO0FBQ3RDLFNBQVMsV0FBVyxRQUFRLGFBQWE7QUFFekMsU0FBUyxTQUFTLFFBQVEsdUJBQXVCO0FBT2pELFNBQVMsWUFDUCxJQUFnQixFQUNoQixRQUEwQixFQUNUO0lBQ2pCLE1BQU0sU0FBUyxPQUFPLElBQUksQ0FBQyxLQUFLLE1BQU0sRUFBRSxLQUFLLFVBQVUsRUFBRSxLQUFLLFVBQVU7SUFDeEUsSUFBSSxZQUFZLGFBQWEsVUFBVSxPQUFPLE9BQU8sUUFBUSxDQUFDO0lBQzlELE9BQU87QUFDVDtBQXVCQSxPQUFPLFNBQVMsU0FDZCxJQUFrQixFQUNsQixhQUFpRSxFQUNqRSxRQUFtQixFQUNuQjtJQUNBLE9BQU8sZ0JBQWdCLE1BQU0sWUFBWSxRQUFRLElBQUk7SUFDckQsSUFBSTtJQUNKLElBQUksT0FBTyxrQkFBa0IsWUFBWTtRQUN2QyxLQUFLO0lBQ1AsT0FBTztRQUNMLEtBQUs7SUFDUCxDQUFDO0lBRUQsTUFBTSxXQUFXLFlBQVk7SUFFN0IsTUFBTSxJQUFJLEtBQUssUUFBUSxDQUFDO0lBRXhCLElBQUksSUFBSTtRQUNOLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBcUI7WUFDM0IsSUFBSSxZQUFZLGFBQWEsVUFBVTtnQkFDckMsTUFBTSxPQUFPLFlBQVksTUFBTTtnQkFDL0IsT0FBTyxBQUFDLEdBQW9CLElBQUksRUFBRTtZQUNwQyxDQUFDO1lBQ0QsTUFBTSxTQUFTLFlBQVksTUFBTTtZQUNoQyxHQUFzQixJQUFJLEVBQUU7UUFDL0IsR0FBRyxDQUFDLE1BQVEsTUFBTSxHQUFHO0lBQ3ZCLENBQUM7QUFDSCxDQUFDO0FBRUQsT0FBTyxNQUFNLGtCQUFrQixVQUFVLFVBSXZDO0FBVUYsT0FBTyxTQUFTLGFBQ2QsSUFBa0IsRUFDbEIsR0FBeUIsRUFDUjtJQUNqQixPQUFPLGdCQUFnQixNQUFNLFlBQVksUUFBUSxJQUFJO0lBQ3JELE1BQU0sT0FBTyxLQUFLLFlBQVksQ0FBQztJQUMvQixNQUFNLFdBQVcsWUFBWTtJQUM3QixJQUFJLFlBQVksYUFBYSxVQUFVO1FBQ3JDLE1BQU0sT0FBTyxZQUFZLE1BQU07UUFDL0IsT0FBTztJQUNULENBQUM7SUFDRCxNQUFNLFNBQVMsWUFBWSxNQUFNO0lBQ2pDLE9BQU87QUFDVCxDQUFDIn0=
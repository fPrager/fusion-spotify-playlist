import getArtists from "./fusion/get-artists.ts";
import PLAYLIST_MAP from "./playlist.ts";
import addTracksToPlaylist from "./spotify/add-tracks-to-playlist.ts";
import getArtistsTopTracks from "./spotify/get-artists-top-tracks.ts";
import getArtistId from "./spotify/get-artitst-id.ts";
import getPlaylistId from "./spotify/get-playlist-id.ts";
import getTracksInPlaylist from "./spotify/get-tracks-in-playlist.ts";
import removeTracksFromPlaylist from "./spotify/remove-tracks-from-playlist.ts";
import updatePlaylistInfo from "./spotify/update-playlist-info.ts";
const upsertPlaylist = async (name)=>{
    const playlistId = await getPlaylistId(name);
    const existingTracks = await getTracksInPlaylist(playlistId);
    console.log(`... got ${existingTracks.length} existing tracks`);
    const artistsToAdd = await getArtists(PLAYLIST_MAP[name].url);
    console.log(`... artists on page ${artistsToAdd}`);
    const tracksForPlaylist = await artistsToAdd.reduce(async (tracks, artistName)=>{
        const spotifyId = await getArtistId(artistName);
        if (!spotifyId) {
            return tracks;
        }
        return [
            ...await tracks,
            ...await getArtistsTopTracks(spotifyId)
        ];
    }, Promise.resolve([]));
    const tracksToRemove = existingTracks.filter(({ track  })=>track && !tracksForPlaylist.some(({ uri: wantedUri  })=>wantedUri === track.uri)).map(({ track  })=>track);
    const tracksToAdd = tracksForPlaylist.filter(({ uri  })=>!existingTracks.some(({ track  })=>track && track.uri === uri));
    console.log(`...remove ${tracksToRemove.length} tracks of artists, that are not present anymore`);
    // @ts-expect-error
    await removeTracksFromPlaylist(playlistId, tracksToRemove);
    console.log(`...add ${tracksToAdd.length} tracks of artists, that are not in list yet`);
    await addTracksToPlaylist(playlistId, tracksToAdd);
    console.log(`...update playlist info`);
    await updatePlaylistInfo(playlistId);
    console.log(`done for ${name}✔️`);
};
export default upsertPlaylist;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9ydW5uZXIvRnVzaW9uU3BvdGlmeVBsYXlsaXN0L3Vwc2VydC1wbGF5bGlzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0QXJ0aXN0cyBmcm9tIFwiLi9mdXNpb24vZ2V0LWFydGlzdHMudHNcIjtcbmltcG9ydCB7IFBsYXlsaXN0TmFtZSB9IGZyb20gXCIuL3BsYXlsaXN0LnRzXCI7XG5pbXBvcnQgUExBWUxJU1RfTUFQIGZyb20gXCIuL3BsYXlsaXN0LnRzXCI7XG5pbXBvcnQgYWRkVHJhY2tzVG9QbGF5bGlzdCBmcm9tIFwiLi9zcG90aWZ5L2FkZC10cmFja3MtdG8tcGxheWxpc3QudHNcIjtcbmltcG9ydCBnZXRBcnRpc3RzVG9wVHJhY2tzIGZyb20gXCIuL3Nwb3RpZnkvZ2V0LWFydGlzdHMtdG9wLXRyYWNrcy50c1wiO1xuaW1wb3J0IGdldEFydGlzdElkIGZyb20gXCIuL3Nwb3RpZnkvZ2V0LWFydGl0c3QtaWQudHNcIjtcbmltcG9ydCBnZXRQbGF5bGlzdElkIGZyb20gXCIuL3Nwb3RpZnkvZ2V0LXBsYXlsaXN0LWlkLnRzXCI7XG5pbXBvcnQgZ2V0VHJhY2tzSW5QbGF5bGlzdCBmcm9tIFwiLi9zcG90aWZ5L2dldC10cmFja3MtaW4tcGxheWxpc3QudHNcIjtcbmltcG9ydCByZW1vdmVUcmFja3NGcm9tUGxheWxpc3QgZnJvbSBcIi4vc3BvdGlmeS9yZW1vdmUtdHJhY2tzLWZyb20tcGxheWxpc3QudHNcIjtcbmltcG9ydCB1cGRhdGVQbGF5bGlzdEluZm8gZnJvbSBcIi4vc3BvdGlmeS91cGRhdGUtcGxheWxpc3QtaW5mby50c1wiO1xuXG5jb25zdCB1cHNlcnRQbGF5bGlzdCA9IGFzeW5jIChuYW1lOiBQbGF5bGlzdE5hbWUpID0+IHtcbiAgY29uc3QgcGxheWxpc3RJZCA9IGF3YWl0IGdldFBsYXlsaXN0SWQobmFtZSk7XG4gIGNvbnN0IGV4aXN0aW5nVHJhY2tzID0gYXdhaXQgZ2V0VHJhY2tzSW5QbGF5bGlzdChwbGF5bGlzdElkKTtcbiAgY29uc29sZS5sb2coYC4uLiBnb3QgJHtleGlzdGluZ1RyYWNrcy5sZW5ndGh9IGV4aXN0aW5nIHRyYWNrc2ApXG4gIGNvbnN0IGFydGlzdHNUb0FkZCA9IGF3YWl0IGdldEFydGlzdHMoUExBWUxJU1RfTUFQW25hbWVdLnVybCk7XG4gIGNvbnNvbGUubG9nKGAuLi4gYXJ0aXN0cyBvbiBwYWdlICR7YXJ0aXN0c1RvQWRkfWApXG4gIGNvbnN0IHRyYWNrc0ZvclBsYXlsaXN0ID0gYXdhaXQgYXJ0aXN0c1RvQWRkLnJlZHVjZShcbiAgICBhc3luYyAodHJhY2tzLCBhcnRpc3ROYW1lKSA9PiB7XG4gICAgICBjb25zdCBzcG90aWZ5SWQgPSBhd2FpdCBnZXRBcnRpc3RJZChhcnRpc3ROYW1lKTtcbiAgICAgIGlmICghc3BvdGlmeUlkKSB7XG4gICAgICAgIHJldHVybiB0cmFja3M7XG4gICAgICB9XG4gICAgICByZXR1cm4gWy4uLihhd2FpdCB0cmFja3MpLCAuLi4oYXdhaXQgZ2V0QXJ0aXN0c1RvcFRyYWNrcyhzcG90aWZ5SWQpKV07XG4gICAgfSxcbiAgICBQcm9taXNlLnJlc29sdmUoW10gYXMgeyB1cmk6IHN0cmluZyB9W10pLFxuICApO1xuICBjb25zdCB0cmFja3NUb1JlbW92ZSA9IGV4aXN0aW5nVHJhY2tzLmZpbHRlcihcbiAgICAoeyB0cmFjayB9KSA9PlxuICAgICAgdHJhY2sgJiZcbiAgICAgICF0cmFja3NGb3JQbGF5bGlzdC5zb21lKCh7IHVyaTogd2FudGVkVXJpIH0pID0+IHdhbnRlZFVyaSA9PT0gdHJhY2sudXJpKSxcbiAgKS5tYXAoKHsgdHJhY2sgfSkgPT4gdHJhY2spO1xuXG4gIGNvbnN0IHRyYWNrc1RvQWRkID0gdHJhY2tzRm9yUGxheWxpc3QuZmlsdGVyKCh7IHVyaSB9KSA9PlxuICAgICFleGlzdGluZ1RyYWNrcy5zb21lKCh7IHRyYWNrIH0pID0+IHRyYWNrICYmIHRyYWNrLnVyaSA9PT0gdXJpKVxuICApO1xuXG4gIGNvbnNvbGUubG9nKFxuICAgIGAuLi5yZW1vdmUgJHt0cmFja3NUb1JlbW92ZS5sZW5ndGh9IHRyYWNrcyBvZiBhcnRpc3RzLCB0aGF0IGFyZSBub3QgcHJlc2VudCBhbnltb3JlYCxcbiAgKTtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICBhd2FpdCByZW1vdmVUcmFja3NGcm9tUGxheWxpc3QocGxheWxpc3RJZCwgdHJhY2tzVG9SZW1vdmUpO1xuICBjb25zb2xlLmxvZyhcbiAgICBgLi4uYWRkICR7dHJhY2tzVG9BZGQubGVuZ3RofSB0cmFja3Mgb2YgYXJ0aXN0cywgdGhhdCBhcmUgbm90IGluIGxpc3QgeWV0YCxcbiAgKTtcbiAgYXdhaXQgYWRkVHJhY2tzVG9QbGF5bGlzdChwbGF5bGlzdElkLCB0cmFja3NUb0FkZCk7XG4gIGNvbnNvbGUubG9nKGAuLi51cGRhdGUgcGxheWxpc3QgaW5mb2ApO1xuICBhd2FpdCB1cGRhdGVQbGF5bGlzdEluZm8ocGxheWxpc3RJZCk7XG5cbiAgY29uc29sZS5sb2coYGRvbmUgZm9yICR7bmFtZX3inJTvuI9gKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVwc2VydFBsYXlsaXN0O1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sZ0JBQWdCLDBCQUEwQjtBQUVqRCxPQUFPLGtCQUFrQixnQkFBZ0I7QUFDekMsT0FBTyx5QkFBeUIsc0NBQXNDO0FBQ3RFLE9BQU8seUJBQXlCLHNDQUFzQztBQUN0RSxPQUFPLGlCQUFpQiw4QkFBOEI7QUFDdEQsT0FBTyxtQkFBbUIsK0JBQStCO0FBQ3pELE9BQU8seUJBQXlCLHNDQUFzQztBQUN0RSxPQUFPLDhCQUE4QiwyQ0FBMkM7QUFDaEYsT0FBTyx3QkFBd0Isb0NBQW9DO0FBRW5FLE1BQU0saUJBQWlCLE9BQU8sT0FBdUI7SUFDbkQsTUFBTSxhQUFhLE1BQU0sY0FBYztJQUN2QyxNQUFNLGlCQUFpQixNQUFNLG9CQUFvQjtJQUNqRCxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxlQUFlLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztJQUM5RCxNQUFNLGVBQWUsTUFBTSxXQUFXLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRztJQUM1RCxRQUFRLEdBQUcsQ0FBQyxDQUFDLG9CQUFvQixFQUFFLGFBQWEsQ0FBQztJQUNqRCxNQUFNLG9CQUFvQixNQUFNLGFBQWEsTUFBTSxDQUNqRCxPQUFPLFFBQVEsYUFBZTtRQUM1QixNQUFNLFlBQVksTUFBTSxZQUFZO1FBQ3BDLElBQUksQ0FBQyxXQUFXO1lBQ2QsT0FBTztRQUNULENBQUM7UUFDRCxPQUFPO2VBQUssTUFBTTtlQUFhLE1BQU0sb0JBQW9CO1NBQVk7SUFDdkUsR0FDQSxRQUFRLE9BQU8sQ0FBQyxFQUFFO0lBRXBCLE1BQU0saUJBQWlCLGVBQWUsTUFBTSxDQUMxQyxDQUFDLEVBQUUsTUFBSyxFQUFFLEdBQ1IsU0FDQSxDQUFDLGtCQUFrQixJQUFJLENBQUMsQ0FBQyxFQUFFLEtBQUssVUFBUyxFQUFFLEdBQUssY0FBYyxNQUFNLEdBQUcsR0FDekUsR0FBRyxDQUFDLENBQUMsRUFBRSxNQUFLLEVBQUUsR0FBSztJQUVyQixNQUFNLGNBQWMsa0JBQWtCLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBRyxFQUFFLEdBQ25ELENBQUMsZUFBZSxJQUFJLENBQUMsQ0FBQyxFQUFFLE1BQUssRUFBRSxHQUFLLFNBQVMsTUFBTSxHQUFHLEtBQUs7SUFHN0QsUUFBUSxHQUFHLENBQ1QsQ0FBQyxVQUFVLEVBQUUsZUFBZSxNQUFNLENBQUMsZ0RBQWdELENBQUM7SUFFdEYsbUJBQW1CO0lBQ25CLE1BQU0seUJBQXlCLFlBQVk7SUFDM0MsUUFBUSxHQUFHLENBQ1QsQ0FBQyxPQUFPLEVBQUUsWUFBWSxNQUFNLENBQUMsNENBQTRDLENBQUM7SUFFNUUsTUFBTSxvQkFBb0IsWUFBWTtJQUN0QyxRQUFRLEdBQUcsQ0FBQyxDQUFDLHVCQUF1QixDQUFDO0lBQ3JDLE1BQU0sbUJBQW1CO0lBRXpCLFFBQVEsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQ2xDO0FBRUEsZUFBZSxlQUFlIn0=